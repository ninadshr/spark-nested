package org.spark.nested

import org.apache.spark.sql.SparkSession

//Replace all path to paths of data files. See sample data in "src/main/resources"
class DataCreator {

  def createcustomerDetails(spark: org.apache.spark.sql.SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS CUSTOMER_DETAILS")
    spark.sql("CREATE EXTERNAL TABLE CUSTOMER_DETAILS (CUSTOMER_ID STRING, NAME STRING, SUBSCRIPTION_TYPE STRING, STREET_ADDRESS STRING,	CITY STRING," +
      "STATE	STRING, COUNTRY	STRING, ZIPCODE STRING,	START_DATE	STRING, END_DATE STRING)  " +
      " ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '/Users/ninad/Documents/customer_ecomm/customer_ecomm/'")
  }

  def createSamplecustomerPayments(spark: org.apache.spark.sql.SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS CUSTOMER_PAYMENTS")
    spark.sql("create table customer_payments (CUSTOMER_ID STRING,	PAYMENT_ID STRING,	PAYMENT_TYPE STRING,	CARD_NUMBER STRING,	BILLING_ADDRESS	STRING, START_DATE STRING,	END_DATE STRING)" +
      " ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '/Users/ninad/Documents/customer_ecomm/customer_payment/'")
  }

  def createcustomerTransaction(spark: org.apache.spark.sql.SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS CUSTOMER_TRANSACTIONS")
    spark.sql("CREATE TABLE CUSTOMER_TRANSACTIONS (CUSTOMER_ID	LONG, TRANSACTION_ID	LONG, TRANSCATION_TYPE	STRING, STATUS	STRING, INITIATION_DATE	STRING, END_DATE STRING)" +
      " ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '/USERS/NINAD/DOCUMENTS/CUSTOMER_ECOMM/CUSTOMER_TRANSACTION/'")
  }

  def createTransactionDetails(spark: org.apache.spark.sql.SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS TRANSACTION_DETAILS")
    spark.sql("CREATE TABLE TRANSACTION_DETAILS (TRANSAC_ITEM_ID LONG, TRANSACTION_ID	LONG, ITEM_ID	LONG, QUANTITY	INT, PRICE	DECIMAL(38,10), DISCOUNT	LONG, PAYABLE DECIMAL(38,10))" +
      "ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '/USERS/NINAD/DOCUMENTS/CUSTOMER_ECOMM/TRANSACTION_DETAILS/'")
  }

  def createShipmentDetails(spark: org.apache.spark.sql.SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS SHIPMENT_DETAILS")
    spark.sql("CREATE TABLE SHIPMENT_DETAILS (TRANSAC_ITEM_ID	LONG, SHIPMENT_ID	LONG, ADDRESS	STRING,SHIP_DATE	STRING, ARRIVAL_DATE STRING)" +
      "ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LOCATION '/USERS/NINAD/DOCUMENTS/CUSTOMER_ECOMM/SHIPMENT_DETAILS/'")
  }

  def createcustomerNestingHive(spark: SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS NESTED_CUSTOMER")
    spark.sql("CREATE TABLE NESTED_CUSTOMER (CUSTOMER_ID STRING, NAME STRING, SUBSCRIPTION_TYPE STRING, STREET_ADDRESS STRING,	CITY STRING," +
      "STATE	STRING, COUNTRY	STRING, ZIPCODE STRING,	START_DATE	STRING, END_DATE STRING,  " +
      "PAYMENT_INFO ARRAY<STRUCT<customer_id:STRING, payment_id:STRING,	payment_type:STRING,	card_number:STRING,	billing_address:STRING, start_date:STRING,	end_date:STRING>>  " +
      " ) STORED AS PARQUET")
  }

  
  def createTransactionNestingHive(spark: SparkSession) = {
    spark.sql("DROP TABLE IF EXISTS TRANSACTION_NESTED")
    spark.sql("CREATE TABLE TRANSACTION_NESTED (CUSTOMER_ID INT, TRANSACTION_ID INT, TRANSACTION_TYPE STRING, STATUS STRING, INITIATION_DATE STRING, END_DATE STRING, " +
      "TRANSACTION_DETAILS ARRAY<STRUCT<TRANSAC_ITEM_ID:LONG, TRANSACTION_ID:LONG, ITEM_ID:LONG, QUANTITY:INT, PRICE:DECIMAL(38,10), DISCOUNT:LONG, PAYABLE:DECIMAL(38,10)," +
      "SHIPMENT_DETAILS: ARRAY<STRUCT<TRANSAC_ITEM_ID:LONG,SHIPMENT_ID:INT, ADDRESS:STRING, SHIP_DATE:STRING, ARRIVAL_DATE:STRING>>>>)")
  }

}